{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,S,uCCAAC,EAAAD,EAAA,S,oDAOA,MAAME,EAAY,IAAI,EAAAC,EAAAC,WACH,IAAI,EAAAC,EAAAC,SAOf,SAASC,IACf,IACwBL,EAAUM,iBAKxBC,EAAAC,KAAKC,WAAWC,UAAUC,OAAO,aACjCJ,EAAAC,KAAKI,SAASF,UAAUC,OAAO,aAC/BZ,EAAAc,OAAOC,KACH,2B,CAGV,MAAOC,GACLC,QAAQC,IAAIF,EAAMG,Q,EAMlB,SAASC,IACb,IAC0BnB,EAAUoB,iBAC5BC,WAkBXC,iBACG,MAAMC,QAAgBC,wBAAwBC,GAChDT,QAAQC,IAAIM,GACZP,QAAQC,IAAIQ,GACZ,KACE,EAAAC,EAAAC,gBAAeJ,GACfK,WAAWC,MAAMN,EAAQO,c,CACzB,MAAOf,GACPC,QAAQC,IAAIF,E,EAzBNgB,IAEExB,EAAAC,KAAKC,WAAWC,UAAUC,OAAO,aACjCJ,EAAAC,KAAKI,SAASF,UAAUC,OAAO,aAC/BqB,SAASnB,OAAOC,KACb,2B,CAGT,MAAOC,GACLC,QAAQC,IAAIF,EAAMG,Q,EAK1B,IAAIO,EAAkBzB,EAAUoB,iB,0HDpChC,EAAAa,EAAAC,6BAI2BC,aAAdC,KAAO,OAIpB,EAAAC,EAAAC,2BAGqCC,YAAzBC,EAAAC,kCAAmC,MAIR,EAAvC5C,EAAA6C,sBCrBAnC,EAAAC,KAAKmC,WAAWC,iBAAiB,QAASvC,GAC1CE,EAAAC,KAAKqC,SAASD,iBAAiB,QAASzB,IDwBxC,EAAA2B,EAAAC,eAIA,EAAAC,EAAAC,eAWA,MAAMC,EAAY,IAAI,EAAAjD,EAAAC,WAMtB,IAAIiD,EAAkBD,EAAU9B,iBAChCJ,QAAQC,IAAIkC,GAqBZ7B,iBACE,MAAM8B,QApBR9B,eAAuC+B,GAerC,aAdmBC,QAAQC,IACzBF,EAAgBG,KAAIC,IAClB,IACE,MAAMC,EAAM,sCAAoBD,uEAChC,OAAOE,EAAAvD,QAAMwD,IAAIF,GAAKG,MAAKC,IACzB,IAAKA,EACH,MAAM,IAAIC,MAAMD,EAASE,QAE3B,OAAOF,EAASG,IAAI,G,CAEtB,MAAOlD,GACPC,QAAQD,O,MAQSmD,CAAwBf,GAC/C,IACEnC,QAAQC,OAAOmC,GASnB,UAA+Be,GAAEA,EAAEC,YAAEA,EAAWC,MAAEA,EAAKC,eAAEA,EAAcC,cAAEA,EAAaC,aAAEA,EAAYC,eAAEA,EAAcC,OAAEA,EAAMC,aAAEA,IAC5H,IAAIC,EAAYF,EAAOG,MAAM,EAAG,GAAGrB,KAAI,EAACsB,KAAEA,KAAWA,IAClDC,KAAK,MAEV,MAAMC,EAAO,4BACPC,EAAM,2CAA2CZ,GAASC,GAAkBC,sFAC7BH,OAI/Cc,EAAS,kCAAkCf,yBAC7BC,EAAca,EAAMD,iDACKV,GAAkBD,GAASE,uDAC3BK,GAAa,0BAC7CJ,GAAgBC,GAAkB,iBAAiBI,MAC5D,EACA,qDAEiCF,6BAGnC3D,QAAQC,IAAIiE,GACZ3E,EAAAC,KAAK2E,aAAaC,mBAAmB,aAAcF,E,CA7BjDG,IAAyBjC,E,CAEzB,MAAOrC,GACPC,QAAQC,IAAIF,E,EAThBuE","sources":["src/library.js","src/js/watched_queue.js"],"sourcesContent":["import { sliderRevenueFilms } from './js/slideRevenueFilms';\nimport { scrolToTop } from './js/scrolToTop';\nimport { onTeamModal } from './js/team_modal';\n// логіка кнопок і посилань навігації хедера\nimport { libraryHeaderLinkBntLogic } from './js/headerBtnLinkLogic';\nimport { btnClick } from './js/watched_queue';\nimport {\n  giveLocalStorageToFirebaseStorage,\n  deleteUserDataInFirebaseStorage,\n} from './js/firebaseDatastorage';\nimport 'lazysizes';\nimport 'lazysizes/plugins/parent-fit/ls.parent-fit';\n\n// import {} from './js/language';\n// import { renderWatchedFilmInLibrary } from './js/watched_queue';\n\n// -------------------------------------------header\nlibraryHeaderLinkBntLogic();\n// рендириця картка фільму з id що в  localStorage\n// renderWatchedFilmInLibrary();\n//авторизація (тимчасове рішення)\nlocalStorage.auth = 'yes';\n\n//завантаження теми\nimport { onFirstLoadThemeLibrary } from './js/changeTheme';\nonFirstLoadThemeLibrary();\n\n//надсилання в сховище фаєрбейз кожні 10 секунд\nsetInterval(giveLocalStorageToFirebaseStorage, 10000);\n\n//--------------------------------------------body\n// слайлдер з фільмами, що зібрали найбільшу касу\nsliderRevenueFilms();\n// по кліку на кнопки рендериться відповідна інформація\nbtnClick();\n// кнопка повернення догори\nscrolToTop();\n\n//------------------------------------------footer\n// footer\nonTeamModal();\n\n// ---------------------------------\n\nimport { MyLibrary } from './js/localStorage';\n\nimport { renderFilmCard } from './js/renderFunction';\nimport axios from 'axios';\nimport genresId from './genres.json';\nimport { refs } from './js/refs';\n\nconst myLibrary = new MyLibrary();\nconst KEY = '32432509d17cea42104bbb7507a382c7';\nconst api_key = `?api_key=${KEY}`;\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\n// let arrQueueFilms = myLibrary.getFromQueue();\nlet arrWatchedFilms = myLibrary.getFromWatched();\nconsole.log(arrWatchedFilms);\n\nasync function getFilmFromLocalStorage(arrWatchedFilms) {\n  const data = await Promise.all(\n    arrWatchedFilms.map(idWatchedFilm => {\n      try {\n        const url = `${BASE_URL}movie/${idWatchedFilm}${api_key}&append_to_response=images`;\n        return axios.get(url).then(response => {\n          if (!response) {\n            throw new Error(response.status);\n          }\n          return response.data;\n        });\n      } catch (error) {\n        console.error();\n      }\n    }));\n  return data;\n};\n\nrenderWatchedFilmInLibrary();\nasync function renderWatchedFilmInLibrary() {\n  const filmInfo = await getFilmFromLocalStorage(arrWatchedFilms);\n  try {\n    console.log(...filmInfo);\n    // renderFilmCard(filmInfo);\n    renderFilmCardLibrary(...filmInfo)\n\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nfunction renderFilmCardLibrary({ id, poster_path, title, original_title, original_name, release_date, first_air_date, genres, vote_average }) {\n  let filmGenre = genres.slice(0, 3).map(({ name }) => name)\n    .join(', ');\n\nconst foto = './images/poster_photo.png';\nconst img = `<img   class='film__img lazyload' alt= '${title || original_title || original_name}' width='100%' loading=\"lazy\"\n      data-src='https://image.tmdb.org/t/p/original${poster_path}'/>`;\nconst imgPlug = `<img  class=\"film__img\" '${title || original_title || original_name}' width='100%' \n       src= '${foto}'`;\n\nconst markup = `<li class=\"film__item\" data-id=${id}>\n                  ${poster_path ? img : foto}\n                  <h2 class=\"films__title\">${original_title || title || original_name} </h2>\n                  <p class=\"films__genres\">${filmGenre || 'Not available'\n  }<span>|${(release_date || first_air_date || 'Not available').slice(\n    0,\n    4\n  )}</span></p>\n      <p class=\"films__popularity\">${vote_average}</p>\n              </li>`;\n// refs.movieLibrary.innerHTML = markup;\n  console.log(markup);\n  refs.movieLibrary.insertAdjacentHTML('afterbegin', markup);\n}\n\n\n\n\n","import { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport { refs } from './refs';\nimport { MyLibrary } from './localStorage';\nimport ApiService from './fetchProdactsAPI';\nimport { renderFilmCard } from './renderFunction';\n\n\nconst myLibrary = new MyLibrary();\nconst apiService = new ApiService();\n\nexport function btnClick() {\nrefs.btnWatched.addEventListener('click', onWatchedBtnClick);\nrefs.btnQueue.addEventListener('click', onQueueBtnClick);  \n}\n\nexport  function onWatchedBtnClick() {\n  try {\n    let arrWatchedFilms = myLibrary.getFromQueue();\n\n    if (arrWatchedFilms) {\n          // renderWatchedFilmInLibrary(arrWatchedFilms);\n    } else  {\n            refs.emptyTitle.classList.remove('is-hidden');\n            refs.emptyImg.classList.remove('is-hidden');\n            Notify.info(\n                `Your film list is empty`\n            );\n    } \n    } catch (error) {\n        console.log(error.message);\n    }\n    return;\n};\n// Queue\n\nexport  function onQueueBtnClick() {\n    try {\n        let arrWatchedFilms = myLibrary.getFromWatched();\n        if (queueMovie) {\n          renderWatchedFilmInLibrary();\n          } else {\n            refs.emptyTitle.classList.remove('is-hidden');\n            refs.emptyImg.classList.remove('is-hidden');\n            Notiflix.Notify.info(\n               `Your film list is empty`\n    );\n        }\n    } catch (error) {\n        console.log(error.message);\n    }\n    return;\n};\n// -------------\nlet arrWatchedFilms = myLibrary.getFromWatched();\n\n// renderWatchedFilmInLibrary()\n async function renderWatchedFilmInLibrary() {\n    const results = await getFilmFromLocalStorage(arrWatchedFilms);\n  console.log(results);\n  console.log(arrWatchedFilms);\n  try {\n    renderFilmCard(results);\n    pagination.reset(results.total_results);\n  } catch (error) {\n    console.log(error);\n  }\n}\n\n"],"names":["$9XIKo","parcelRequire","$iQIUW","$8354e51cebac36b3$var$myLibrary","$31u3U","MyLibrary","$f4Y7b","default","$8354e51cebac36b3$export$852eb21c65e590aa","getFromQueue","$krGWQ","refs","emptyTitle","classList","remove","emptyImg","Notify","info","error","console","log","message","$8354e51cebac36b3$export$47c64e1cb6fdbeb7","getFromWatched","queueMovie","async","results","getFilmFromLocalStorage","$8354e51cebac36b3$var$arrWatchedFilms","$7NS3K","renderFilmCard","pagination","reset","total_results","$8354e51cebac36b3$var$renderWatchedFilmInLibrary","Notiflix","$28AT6","libraryHeaderLinkBntLogic","localStorage","auth","$1wH5c","onFirstLoadThemeLibrary","setInterval","$iytAl","giveLocalStorageToFirebaseStorage","sliderRevenueFilms","btnWatched","addEventListener","btnQueue","$1awFj","scrolToTop","$hR8LQ","onTeamModal","$ce3726a01b8ab25a$var$myLibrary","$ce3726a01b8ab25a$var$arrWatchedFilms","filmInfo","arrWatchedFilms1","Promise","all","map","idWatchedFilm","url","$2shzp","get","then","response","Error","status","data","$ce3726a01b8ab25a$var$getFilmFromLocalStorage","id","poster_path","title","original_title","original_name","release_date","first_air_date","genres","vote_average","filmGenre","slice","name","join","foto","img","markup","movieLibrary","insertAdjacentHTML","$ce3726a01b8ab25a$var$renderFilmCardLibrary","$ce3726a01b8ab25a$var$renderWatchedFilmInLibrary"],"version":3,"file":"my_library.07c1f734.js.map"}