{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,S,uCCAAC,EAAAD,EAAA,S,oDAOA,MAAME,EAAY,IAAI,EAAAC,EAAAC,WACH,IAAI,EAAAC,EAAAC,SAOf,SAASC,IACf,IACwBL,EAAUM,iBAKxBC,EAAAC,KAAKC,WAAWC,UAAUC,OAAO,aACjCJ,EAAAC,KAAKI,SAASF,UAAUC,OAAO,aAC/BZ,EAAAc,OAAOC,KACH,2B,CAGV,MAAOC,GACLC,QAAQC,IAAIF,EAAMG,Q,EAMlB,SAASC,IACb,IAC0BnB,EAAUoB,iBAC5BC,WAkBXC,iBACG,MAAMC,QAAgBC,wBAAwBC,GAChDT,QAAQC,IAAIM,GACZP,QAAQC,IAAIQ,GACZ,KACE,EAAAC,EAAAC,gBAAeJ,GACfK,WAAWC,MAAMN,EAAQO,c,CACzB,MAAOf,GACPC,QAAQC,IAAIF,E,EAzBNgB,IAEExB,EAAAC,KAAKC,WAAWC,UAAUC,OAAO,aACjCJ,EAAAC,KAAKI,SAASF,UAAUC,OAAO,aAC/BqB,SAASnB,OAAOC,KACb,2B,CAGT,MAAOC,GACLC,QAAQC,IAAIF,EAAMG,Q,EAK1B,IAAIO,EAAkBzB,EAAUoB,iB,wHDpChC,EAAAa,EAAAC,6BAI2BC,aAAdC,KAAO,OAIpB,EAAAC,EAAAC,2BAGqCC,YAAzBC,EAAAC,kCAAmC,MAIR,EAAvC5C,EAAA6C,sBCrBAnC,EAAAC,KAAKmC,WAAWC,iBAAiB,QAASvC,GAC1CE,EAAAC,KAAKqC,SAASD,iBAAiB,QAASzB,IDwBxC,EAAA2B,EAAAC,eAIA,EAAAC,EAAAC,eAWA,MAAMC,EAAY,IAAI,EAAAjD,EAAAC,WAMtB,IAAIiD,EAAkBD,EAAU9B,iBAChCJ,QAAQC,IAAIkC,GAsBZ7B,iBACE,MAAM8B,QArBR9B,eAAuC+B,GACtC,MAAMC,QAAaC,QAAQC,IACxBH,EAAgBI,KAAIC,IAClB,IACE,MAAMC,EAAM,sCAAoBD,uEAChC,OAAOE,EAAAxD,QAAMyD,IAAIF,GAAKG,MAAKC,IACzB,IAAKA,EACH,MAAM,IAAIC,MAAMD,EAASE,QAE3B,OAAOF,EAAST,IAAI,G,CAEtB,MAAOvC,GACPC,QAAQD,O,MAIZ,OADAC,QAAQC,IAAIqC,GACLA,C,CAKcY,CAAwBf,GAC/C,IACGnC,QAAQC,IAAImC,IACb,EAAA1B,EAAAC,gBAAeyB,E,CAEf,MAAOrC,GACPC,QAAQC,IAAIF,E,EARhBoD","sources":["src/library.js","src/js/watched_queue.js"],"sourcesContent":["import { sliderRevenueFilms } from './js/slideRevenueFilms';\nimport { scrolToTop } from './js/scrolToTop';\nimport { onTeamModal } from './js/team_modal';\n// логіка кнопок і посилань навігації хедера\nimport { libraryHeaderLinkBntLogic } from './js/headerBtnLinkLogic';\nimport { btnClick } from './js/watched_queue';\nimport {\n  giveLocalStorageToFirebaseStorage,\n  deleteUserDataInFirebaseStorage,\n} from './js/firebaseDatastorage';\nimport 'lazysizes';\nimport 'lazysizes/plugins/parent-fit/ls.parent-fit';\n\n// import {} from './js/language';\n// import { renderWatchedFilmInLibrary } from './js/watched_queue';\n\n// -------------------------------------------header\nlibraryHeaderLinkBntLogic();\n// рендириця картка фільму з id що в  localStorage\n// renderWatchedFilmInLibrary();\n//авторизація (тимчасове рішення)\nlocalStorage.auth = 'yes';\n\n//завантаження теми\nimport { onFirstLoadThemeLibrary } from './js/changeTheme';\nonFirstLoadThemeLibrary();\n\n//надсилання в сховище фаєрбейз кожні 10 секунд\nsetInterval(giveLocalStorageToFirebaseStorage, 10000);\n\n//--------------------------------------------body\n// слайлдер з фільмами, що зібрали найбільшу касу\nsliderRevenueFilms();\n// по кліку на кнопки рендериться відповідна інформація\nbtnClick();\n// кнопка повернення догори\nscrolToTop();\n\n//------------------------------------------footer\n// footer\nonTeamModal();\n\n// ---------------------------------\n\nimport { MyLibrary } from './js/localStorage';\n\nimport { renderFilmCard } from './js/renderFunction';\nimport axios from 'axios';\nimport genresId from './genres.json';\nimport { refs } from './js/refs';\n\nconst myLibrary = new MyLibrary();\nconst KEY = '32432509d17cea42104bbb7507a382c7';\nconst api_key = `?api_key=${KEY}`;\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\n// let arrQueueFilms = myLibrary.getFromQueue();\nlet arrWatchedFilms = myLibrary.getFromWatched();\nconsole.log(arrWatchedFilms);\n//  getFilmFromLocalStorage()\nasync function getFilmFromLocalStorage(arrWatchedFilms) {\n const data = await Promise.all(\n    arrWatchedFilms.map(idWatchedFilm => {\n      try {\n        const url = `${BASE_URL}movie/${idWatchedFilm}${api_key}&append_to_response=images`;\n        return axios.get(url).then(response => {\n          if (!response) {\n            throw new Error(response.status);\n          }\n          return response.data;\n        });\n      } catch (error) {\n        console.error();\n      }\n    }));\n    console.log(data);\n    return data;\n};\n\nrenderWatchedFilmInLibrary();\nasync function renderWatchedFilmInLibrary() {\n  const filmInfo = await getFilmFromLocalStorage(arrWatchedFilms);\n  try {\n     console.log(filmInfo);\n    renderFilmCard(filmInfo);\n   \n  } catch (error) {\n    console.log(error);\n  }\n}\n\n// function filmCardToLibrary({budget,\n  // id, poster_path, title, original_title, original_name,\n  // release_date, first_air_date, popularity,\n//   genres}) {\n//   console.log(budget);\n//   console.log(genres);\n//   const filmGenres = genres\n//     .slice(0, 3)\n//     .map(({ name }) => name)\n//     .join(', ');\n  \n//  const markup = `\n//       <li class=\"glide__slide\" data-id=${id}>\n//       <a class=\"glide__link\" href= \"\">\n//       <div class=\"glide__container\">\n//                  <img   class='glide__img' alt= '${\n//                    title || original_title || original_name\n//                  }' width='360' loading=\"lazy\"\n//                   src='https://image.tmdb.org/t/p/original${poster_path}'/>\n//                   <div class=\"glide__text\">\n//                   <h2 class=\"glide__title\">${\n//                     title || original_title || original_name\n//                   }</h2>\n//                   <p class=\"glide__genres\">${filmGenres}<span>|${(release_date ||\n//     first_air_date || 'Not available').slice(0, 4)}</span></p>\n//                          <p class=\"films__popularity\">${popularity}</p>\n//                          </div></div></a>\n//               </li>`;\n//   refs.glideSlides.innerHTML = markup;\n// }\n\n// function renderCardToLibrary(film) {\n//   const markup = filmCardToLibrary(film);\n//   refs.glideSlides.innerHTML = markup;\n  // console.log(markup);\n  // console.log(film);\n// }\n\n\n// function renderWatchedFilmInLibrary() {\n//   getFilmFromLocalStorage(arrWatchedFilms).then((result) => {\n//     console.log(result);\n//   }).catch((error) => {console.log(error)})\n// }\n\n","import { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport { refs } from './refs';\nimport { MyLibrary } from './localStorage';\nimport ApiService from './fetchProdactsAPI';\nimport { renderFilmCard } from './renderFunction';\n\n\nconst myLibrary = new MyLibrary();\nconst apiService = new ApiService();\n\nexport function btnClick() {\nrefs.btnWatched.addEventListener('click', onWatchedBtnClick);\nrefs.btnQueue.addEventListener('click', onQueueBtnClick);  \n}\n\nexport  function onWatchedBtnClick() {\n  try {\n    let arrWatchedFilms = myLibrary.getFromQueue();\n\n    if (arrWatchedFilms) {\n          // renderWatchedFilmInLibrary(arrWatchedFilms);\n    } else  {\n            refs.emptyTitle.classList.remove('is-hidden');\n            refs.emptyImg.classList.remove('is-hidden');\n            Notify.info(\n                `Your film list is empty`\n            );\n    } \n    } catch (error) {\n        console.log(error.message);\n    }\n    return;\n};\n// Queue\n\nexport  function onQueueBtnClick() {\n    try {\n        let arrWatchedFilms = myLibrary.getFromWatched();\n        if (queueMovie) {\n          renderWatchedFilmInLibrary();\n          } else {\n            refs.emptyTitle.classList.remove('is-hidden');\n            refs.emptyImg.classList.remove('is-hidden');\n            Notiflix.Notify.info(\n               `Your film list is empty`\n    );\n        }\n    } catch (error) {\n        console.log(error.message);\n    }\n    return;\n};\n// -------------\nlet arrWatchedFilms = myLibrary.getFromWatched();\n\n// renderWatchedFilmInLibrary()\n async function renderWatchedFilmInLibrary() {\n    const results = await getFilmFromLocalStorage(arrWatchedFilms);\n  console.log(results);\n  console.log(arrWatchedFilms);\n  try {\n    renderFilmCard(results);\n    pagination.reset(results.total_results);\n  } catch (error) {\n    console.log(error);\n  }\n}\n\n"],"names":["$9XIKo","parcelRequire","$iQIUW","$8354e51cebac36b3$var$myLibrary","$31u3U","MyLibrary","$f4Y7b","default","$8354e51cebac36b3$export$852eb21c65e590aa","getFromQueue","$krGWQ","refs","emptyTitle","classList","remove","emptyImg","Notify","info","error","console","log","message","$8354e51cebac36b3$export$47c64e1cb6fdbeb7","getFromWatched","queueMovie","async","results","getFilmFromLocalStorage","$8354e51cebac36b3$var$arrWatchedFilms","$7NS3K","renderFilmCard","pagination","reset","total_results","$8354e51cebac36b3$var$renderWatchedFilmInLibrary","Notiflix","$28AT6","libraryHeaderLinkBntLogic","localStorage","auth","$1wH5c","onFirstLoadThemeLibrary","setInterval","$iytAl","giveLocalStorageToFirebaseStorage","sliderRevenueFilms","btnWatched","addEventListener","btnQueue","$1awFj","scrolToTop","$hR8LQ","onTeamModal","$ce3726a01b8ab25a$var$myLibrary","$ce3726a01b8ab25a$var$arrWatchedFilms","filmInfo","arrWatchedFilms1","data","Promise","all","map","idWatchedFilm","url","$2shzp","get","then","response","Error","status","$ce3726a01b8ab25a$var$getFilmFromLocalStorage","$ce3726a01b8ab25a$var$renderWatchedFilmInLibrary"],"version":3,"file":"my_library.42460acd.js.map"}