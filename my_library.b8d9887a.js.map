{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,S,oECAAD,EAAAC,EAAA,S,6EAOMC,EAAY,IAAI,EAAAC,EAAAC,WACH,IAAI,EAAAC,EAAAC,SAOf,SAASC,IACf,IACwBL,EAAUM,iBAKxBC,EAAAC,KAAKC,WAAWC,UAAUC,OAAO,aACjCJ,EAAAC,KAAKI,SAASF,UAAUC,OAAO,aAC/BE,EAAAC,OAAOC,KACF,2B,CAGX,MAAOC,GACLC,QAAQC,IAAIF,EAAMG,Q,EAMlB,SAASC,IACb,IAC0BpB,EAAUqB,iBAC5BC,W,WAkBIC,EAA0BC,MAAAC,KAAAC,U,CAjBhCC,IAEEpB,EAAAC,KAAKC,WAAWC,UAAUC,OAAO,aACjCJ,EAAAC,KAAKI,SAASF,UAAUC,OAAO,aAC/BiB,SAASd,OAAOC,KACZ,2B,CAGV,MAAOC,GACLC,QAAQC,IAAIF,EAAMG,Q,EAK1B,IAAIU,EAAkB7B,EAAUqB,iB,SAGhBE,I,OAAAA,EAAfO,EAAAhC,EAAA,CAAAgC,EAAAC,GAAAC,MAAA,SAAAC,I,IACSC,E,kFAAgBC,wBAAwBN,G,OAAxCK,EAAOE,EAAAC,KACfpB,QAAQC,IAAIgB,GACZjB,QAAQC,IAAIW,GACZ,KACE,EAAAS,EAAAC,gBAAeL,GACfM,WAAWC,MAAMP,EAAQQ,c,CACzB,MAAO1B,GACPC,QAAQC,IAAIF,E,6CAR0BQ,MAAAC,KAAAC,U,yHDvC1C,EAAAiB,EAAAC,6BAI2BC,aAAdC,KAAO,OAIpB,EAAAC,EAAAC,2BAGqCC,YAAzBC,EAAAC,kCAAmC,MAIR,EAAvCC,EAAAC,sBCrBA9C,EAAAC,KAAK8C,WAAWC,iBAAiB,QAASlD,GAC1CE,EAAAC,KAAKgD,SAASD,iBAAiB,QAASnC,IDwBxC,EAAAqC,EAAAC,eAIA,EAAAC,EAAAC,eAWA,IAAMC,EAAY,IAAI,EAAA5D,EAAAC,WAEhB4D,EAAU,YAAgBC,OADpB,oCAENC,EAAW,gCAGbC,EAAkBJ,EAAUxC,iB,SAGjB6C,EAAwBC,G,OAAxBC,EAAuB5C,MAAAC,KAAAC,U,UAAvB0C,I,OAAAA,EAAftC,EAAAhC,EAAA,CAAAgC,EAAAC,GAAAC,MAAA,SAAAC,EAAuCkC,G,IAChCE,E,kFAAaC,QAAQC,IACxBJ,EAAgBK,KAAI,SAAAC,GAClB,IACE,IAAMC,EAAM,GAAoBX,OAAjBC,EAAS,UAAwBD,OAAhBU,GAAwBV,OAARD,EAAQ,8BACxD,OAAOa,EAAAvE,QAAMwE,IAAIF,GAAKG,MAAK,SAAAC,GACzB,IAAKA,EACH,MAAM,IAAIC,MAAMD,EAASE,QAE3B,OAAOF,EAAST,I,IAElB,MAAOrD,GACPC,QAAQD,O,oBAXTqD,EAAIjC,EAAAC,KAcPpB,QAAQC,IAAImD,G,kBACLA,G,4CAhB2B7C,MAAAC,KAAAC,U,UAoBvBuD,I,OAAAA,EAAfnD,EAAAhC,EAAA,CAAAgC,EAAAC,GAAAC,MAAA,SAAAC,I,IACQiD,E,kFAAiBhB,EAAwBD,G,OAAzCiB,EAAQ9C,EAAAC,KACd,IACGpB,QAAQC,IAAIgE,IACb,EAAA5C,EAAAC,gBAAe2C,E,CAEf,MAAOlE,GACPC,QAAQC,IAAIF,E,6CAPyBQ,MAAAC,KAAAC,U,CAtBzCT,QAAQC,IAAI+C,G,WAsBGgB,EAA0BzD,MAAAC,KAAAC,U,CADzCyD,E","sources":["src/library.js","src/js/watched_queue.js"],"sourcesContent":["import { sliderRevenueFilms } from './js/slideRevenueFilms';\nimport { scrolToTop } from './js/scrolToTop';\nimport { onTeamModal } from './js/team_modal';\n// логіка кнопок і посилань навігації хедера\nimport { libraryHeaderLinkBntLogic } from './js/headerBtnLinkLogic';\nimport { btnClick } from './js/watched_queue';\nimport {\n  giveLocalStorageToFirebaseStorage,\n  deleteUserDataInFirebaseStorage,\n} from './js/firebaseDatastorage';\nimport 'lazysizes';\nimport 'lazysizes/plugins/parent-fit/ls.parent-fit';\n\n// import {} from './js/language';\n// import { renderWatchedFilmInLibrary } from './js/watched_queue';\n\n// -------------------------------------------header\nlibraryHeaderLinkBntLogic();\n// рендириця картка фільму з id що в  localStorage\n// renderWatchedFilmInLibrary();\n//авторизація (тимчасове рішення)\nlocalStorage.auth = 'yes';\n\n//завантаження теми\nimport { onFirstLoadThemeLibrary } from './js/changeTheme';\nonFirstLoadThemeLibrary();\n\n//надсилання в сховище фаєрбейз кожні 10 секунд\nsetInterval(giveLocalStorageToFirebaseStorage, 10000);\n\n//--------------------------------------------body\n// слайлдер з фільмами, що зібрали найбільшу касу\nsliderRevenueFilms();\n// по кліку на кнопки рендериться відповідна інформація\nbtnClick();\n// кнопка повернення догори\nscrolToTop();\n\n//------------------------------------------footer\n// footer\nonTeamModal();\n\n// ---------------------------------\n\nimport { MyLibrary } from './js/localStorage';\n\nimport { renderFilmCard } from './js/renderFunction';\nimport axios from 'axios';\nimport genresId from './genres.json';\nimport { refs } from './js/refs';\n\nconst myLibrary = new MyLibrary();\nconst KEY = '32432509d17cea42104bbb7507a382c7';\nconst api_key = `?api_key=${KEY}`;\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\n// let arrQueueFilms = myLibrary.getFromQueue();\nlet arrWatchedFilms = myLibrary.getFromWatched();\nconsole.log(arrWatchedFilms);\n//  getFilmFromLocalStorage()\nasync function getFilmFromLocalStorage(arrWatchedFilms) {\n const data = await Promise.all(\n    arrWatchedFilms.map(idWatchedFilm => {\n      try {\n        const url = `${BASE_URL}movie/${idWatchedFilm}${api_key}&append_to_response=images`;\n        return axios.get(url).then(response => {\n          if (!response) {\n            throw new Error(response.status);\n          }\n          return response.data;\n        });\n      } catch (error) {\n        console.error();\n      }\n    }));\n    console.log(data);\n    return data;\n};\n\nrenderWatchedFilmInLibrary();\nasync function renderWatchedFilmInLibrary() {\n  const filmInfo = await getFilmFromLocalStorage(arrWatchedFilms);\n  try {\n     console.log(filmInfo);\n    renderFilmCard(filmInfo);\n   \n  } catch (error) {\n    console.log(error);\n  }\n}\n\n// function filmCardToLibrary({budget,\n  // id, poster_path, title, original_title, original_name,\n  // release_date, first_air_date, popularity,\n//   genres}) {\n//   console.log(budget);\n//   console.log(genres);\n//   const filmGenres = genres\n//     .slice(0, 3)\n//     .map(({ name }) => name)\n//     .join(', ');\n  \n//  const markup = `\n//       <li class=\"glide__slide\" data-id=${id}>\n//       <a class=\"glide__link\" href= \"\">\n//       <div class=\"glide__container\">\n//                  <img   class='glide__img' alt= '${\n//                    title || original_title || original_name\n//                  }' width='360' loading=\"lazy\"\n//                   src='https://image.tmdb.org/t/p/original${poster_path}'/>\n//                   <div class=\"glide__text\">\n//                   <h2 class=\"glide__title\">${\n//                     title || original_title || original_name\n//                   }</h2>\n//                   <p class=\"glide__genres\">${filmGenres}<span>|${(release_date ||\n//     first_air_date || 'Not available').slice(0, 4)}</span></p>\n//                          <p class=\"films__popularity\">${popularity}</p>\n//                          </div></div></a>\n//               </li>`;\n//   refs.glideSlides.innerHTML = markup;\n// }\n\n// function renderCardToLibrary(film) {\n//   const markup = filmCardToLibrary(film);\n//   refs.glideSlides.innerHTML = markup;\n  // console.log(markup);\n  // console.log(film);\n// }\n\n\n// function renderWatchedFilmInLibrary() {\n//   getFilmFromLocalStorage(arrWatchedFilms).then((result) => {\n//     console.log(result);\n//   }).catch((error) => {console.log(error)})\n// }\n\n","import { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport { refs } from './refs';\nimport { MyLibrary } from './localStorage';\nimport ApiService from './fetchProdactsAPI';\nimport { renderFilmCard } from './renderFunction';\n\n\nconst myLibrary = new MyLibrary();\nconst apiService = new ApiService();\n\nexport function btnClick() {\nrefs.btnWatched.addEventListener('click', onWatchedBtnClick);\nrefs.btnQueue.addEventListener('click', onQueueBtnClick);  \n}\n\nexport  function onWatchedBtnClick() {\n  try {\n    let arrWatchedFilms = myLibrary.getFromQueue();\n\n    if (arrWatchedFilms) {\n          // renderWatchedFilmInLibrary(arrWatchedFilms);\n    } else  {\n            refs.emptyTitle.classList.remove('is-hidden');\n            refs.emptyImg.classList.remove('is-hidden');\n            Notify.info(\n                `Your film list is empty`\n            );\n    } \n    } catch (error) {\n        console.log(error.message);\n    }\n    return;\n};\n// Queue\n\nexport  function onQueueBtnClick() {\n    try {\n        let arrWatchedFilms = myLibrary.getFromWatched();\n        if (queueMovie) {\n          renderWatchedFilmInLibrary();\n          } else {\n            refs.emptyTitle.classList.remove('is-hidden');\n            refs.emptyImg.classList.remove('is-hidden');\n            Notiflix.Notify.info(\n               `Your film list is empty`\n    );\n        }\n    } catch (error) {\n        console.log(error.message);\n    }\n    return;\n};\n// -------------\nlet arrWatchedFilms = myLibrary.getFromWatched();\n\n// renderWatchedFilmInLibrary()\n async function renderWatchedFilmInLibrary() {\n    const results = await getFilmFromLocalStorage(arrWatchedFilms);\n  console.log(results);\n  console.log(arrWatchedFilms);\n  try {\n    renderFilmCard(results);\n    pagination.reset(results.total_results);\n  } catch (error) {\n    console.log(error);\n  }\n}\n\n"],"names":["$bpxeT","parcelRequire","$f8a7324243d2254a$var$myLibrary","$UL92Z","MyLibrary","$8fdg5","default","$f8a7324243d2254a$export$852eb21c65e590aa","getFromQueue","$4Nugj","refs","emptyTitle","classList","remove","emptyImg","$h6c0i","Notify","info","error","console","log","message","$f8a7324243d2254a$export$47c64e1cb6fdbeb7","getFromWatched","queueMovie","$f8a7324243d2254a$var$_renderWatchedFilmInLibrary","apply","this","arguments","$f8a7324243d2254a$var$renderWatchedFilmInLibrary","Notiflix","$f8a7324243d2254a$var$arrWatchedFilms","$parcel$interopDefault","$2TvXO","mark","_callee","results","getFilmFromLocalStorage","_ctx","sent","$2ibrE","renderFilmCard","pagination","reset","total_results","$jQRv7","libraryHeaderLinkBntLogic","localStorage","auth","$3jSZ7","onFirstLoadThemeLibrary","setInterval","$eWSA9","giveLocalStorageToFirebaseStorage","$9I33b","sliderRevenueFilms","btnWatched","addEventListener","btnQueue","$8BN3R","scrolToTop","$puS1k","onTeamModal","$cecbdd76f2d3d4bd$var$myLibrary","$cecbdd76f2d3d4bd$var$api_key","concat","$cecbdd76f2d3d4bd$var$BASE_URL","$cecbdd76f2d3d4bd$var$arrWatchedFilms","$cecbdd76f2d3d4bd$var$getFilmFromLocalStorage","arrWatchedFilms1","$cecbdd76f2d3d4bd$var$_getFilmFromLocalStorage","data","Promise","all","map","idWatchedFilm","url","$dIxxU","get","then","response","Error","status","$cecbdd76f2d3d4bd$var$_renderWatchedFilmInLibrary","filmInfo","$cecbdd76f2d3d4bd$var$renderWatchedFilmInLibrary"],"version":3,"file":"my_library.b8d9887a.js.map"}